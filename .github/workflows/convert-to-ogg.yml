name: Convert Mojang FSB to WAV (safe mode) and make manifest

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Fetch Mojang bedrock-samples (sounds/)
        run: |
          set -e
          git clone --depth=1 https://github.com/Mojang/bedrock-samples.git
          mkdir -p mojang_sounds
          cp -a bedrock-samples/resource_pack/sounds/. mojang_sounds/
          echo "Sample of fetched files:"
          find mojang_sounds -type f -name '*.fsb' | head

      - name: Install jq and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Download vgmstream CLI (prebuilt linux)
        run: |
          set -e
          api="https://api.github.com/repos/vgmstream/vgmstream/releases/latest"
          url=$(curl -fsSL "$api" | jq -r '.assets[] | select(.name|test("linux.*cli.*zip$")) | .browser_download_url' | head -n1)
          [ -z "$url" ] && { echo "vgmstream linux CLI asset not found"; exit 1; }
          echo "Downloading: $url"
          curl -L "$url" -o vgmcli.zip
          unzip -q vgmcli.zip -d vgmcli

          # vgmstream-cli 위치 찾아 심볼릭 링크 생성
          if [ -f "$PWD/vgmcli/bin/vgmstream-cli" ]; then
            ln -s "$PWD/vgmcli/bin/vgmstream-cli" ./vgmstream-cli
          elif [ -f "$PWD/vgmcli/vgmstream-cli" ]; then
            ln -s "$PWD/vgmcli/vgmstream-cli" ./vgmstream-cli
          else
            echo "vgmstream-cli not found in zip" >&2
            ls -R vgmcli
            exit 1
          fi
          chmod +x ./vgmstream-cli
          ./vgmstream-cli -h || true

      - name: Convert FSB -> WAV (safe mode, no ffmpeg)
        shell: bash
        run: |
          set -e
          mkdir -p sounds_flat
          # 테스트로 개수 제한하려면 아래 주석 해제:
          # LIMIT=50

          total=0; ok=0; fail=0
          while IFS= read -r -d '' f; do
            rel="${f#mojang_sounds/}"         # ui/loom/take_result1.fsb
            base="${rel%.*}"                  # ui/loom/take_result1
            out="sounds_flat/${base}.wav"
            mkdir -p "$(dirname "$out")"
            echo "Decoding $rel ..."
            if ./vgmstream-cli -o "$out" "$f" >/dev/null 2>&1; then
              if [ -s "$out" ]; then
                echo "OK: $rel -> ${base}.wav"
                ok=$((ok+1))
              else
                echo "SKIP(empty): $rel"
                rm -f "$out"
                fail=$((fail+1))
              fi
            else
              echo "SKIP(codec): $rel"
              fail=$((fail+1))
            fi
            total=$((total+1))
            if [ -n "$LIMIT" ] && [ "$total" -ge "$LIMIT" ]; then
              echo "Hit LIMIT=$LIMIT, stop early"; break
            fi
          done < <(find mojang_sounds -type f -name '*.fsb' -print0)

          echo "Converted: $ok / $total (failed: $fail)"

      - name: Create manifest.json for site (WAV urls)
        shell: bash
        run: |
          set -e
          python3 - <<'PY'
          import os, json
          root = "sounds_flat"
          items = []
          for dirpath, _, files in os.walk(root):
            for fn in files:
              if not fn.lower().endswith(".wav"): continue
              rel = os.path.join(dirpath, fn).replace("\\","/")
              rel2 = rel[len(root)+1:]     # ui/loom/take_result1.wav
              base = rel2[:-4]             # ui/loom/take_result1
              items.append({
                "id": f"minecraft:{base}",
                "label": base,
                "url": rel,                # 브라우저가 직접 받을 경로
                "type": "wav"
              })
          items.sort(key=lambda x: x["label"])
          os.makedirs(root, exist_ok=True)
          with open(os.path.join(root, "manifest.json"), "w", encoding="utf-8") as f:
            json.dump(items, f, ensure_ascii=False, indent=2)
          print(f"manifest entries: {len(items)}")
          PY

      - name: Commit results (sounds_flat/)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add sounds_flat
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Auto: convert FSB -> WAV (safe) and update manifest"
            git push
          fi
